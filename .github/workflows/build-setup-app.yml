name: Build Setup App

on:
  push:
    branches: [master, feature/aws-hosting]
    tags:
      - 'v*.*.*' # Semantic versioning tags
    paths:
      - 'setup/**'
      - '.github/workflows/build-setup-app.yml'
  pull_request:
    branches: [master]
    paths:
      - 'setup/**'
  workflow_dispatch: # Allow manual triggering
    inputs:
      version:
        description: 'Version number (e.g., 1.2.3)'
        required: true
        default: '0.0.0'

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      should_build: ${{ steps.check-build.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Determine version
        id: set-version
        run: |
          # Check for manual trigger with version input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          # Check for a tag push
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix
          else
            # Generate version based on date and commit hash
            DATE_VERSION=$(date +'%Y.%m.%d')
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            VERSION="${DATE_VERSION}-${SHORT_SHA}"
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version set to: ${VERSION}"

      - name: Check if setup files changed
        id: check-build
        run: |
          # Only build if it's a tag, manual dispatch, or if setup files changed
          if [[ "${{ github.ref }}" == refs/tags/v* ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Tag push or manual dispatch - should build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            # Check for a version.txt file
            if [ -f "setup/version.txt" ]; then
              CURRENT_VERSION=$(cat setup/version.txt)
              # Only build if the version is different
              if [ "$CURRENT_VERSION" != "${{ steps.set-version.outputs.version }}" ]; then
                echo "Version changed - should build"
                echo "should_build=true" >> $GITHUB_OUTPUT
              else
                # Get the last two commits
                COMMITS=$(git log -2 --format="%H")
                SHOULD_BUILD="false"
                
                # Check if any files in the setup directory changed
                for COMMIT in $COMMITS; do
                  CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $COMMIT | grep "^setup/")
                  if [[ ! -z "$CHANGED_FILES" ]]; then
                    SHOULD_BUILD="true"
                    break
                  fi
                done
                
                echo "should_build=${SHOULD_BUILD}" >> $GITHUB_OUTPUT
                echo "Setup files changed: ${SHOULD_BUILD}"
              fi
            else
              echo "No version.txt file - should build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          fi

          # Save the version for future builds
          echo "${{ steps.set-version.outputs.version }}" > setup/version.txt

  build-windows:
    needs: determine-version
    if: needs.determine-version.outputs.should_build == 'true'
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        working-directory: setup
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller pillow PyJWT requests

      - name: Build executable
        working-directory: setup
        env:
          VERSION: ${{ needs.determine-version.outputs.version }}
        run: |
          echo "Building Windows executable version $env:VERSION"
          python build_github_actions.py --version $env:VERSION --platform windows

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: cleo-setup-windows-${{ needs.determine-version.outputs.version }}
          path: setup/dist/CLEO_SPA_SETUP.exe
          if-no-files-found: error
          retention-days: 30

  build-macos:
    needs: determine-version
    if: needs.determine-version.outputs.should_build == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        working-directory: setup
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller pillow PyJWT requests

      - name: Build executable
        working-directory: setup
        env:
          VERSION: ${{ needs.determine-version.outputs.version }}
        run: |
          echo "Building macOS executable version $VERSION"
          python build_github_actions.py --version $VERSION --platform macos

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: cleo-setup-macos-${{ needs.determine-version.outputs.version }}
          path: setup/dist/CLEO_SPA_SETUP.app
          if-no-files-found: error
          retention-days: 30

  build-linux:
    needs: determine-version
    if: needs.determine-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk python3-dev

      - name: Install dependencies
        working-directory: setup
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pyinstaller pillow PyJWT requests

      - name: Build executable
        working-directory: setup
        env:
          VERSION: ${{ needs.determine-version.outputs.version }}
        run: |
          echo "Building Linux executable version $VERSION"
          python build_github_actions.py --version $VERSION --platform linux

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: cleo-setup-linux-${{ needs.determine-version.outputs.version }}
          path: setup/dist/CLEO_SPA_SETUP
          if-no-files-found: error
          retention-days: 30

  create-release:
    needs: [determine-version, build-windows, build-macos, build-linux]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List all artifacts
        run: find ./artifacts -type f | sort

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: CLEO SPA Setup v${{ needs.determine-version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/cleo-setup-windows-${{ needs.determine-version.outputs.version }}/CLEO_SPA_SETUP.exe
            ./artifacts/cleo-setup-linux-${{ needs.determine-version.outputs.version }}/CLEO_SPA_SETUP
            ./artifacts/cleo-setup-macos-${{ needs.determine-version.outputs.version }}/CLEO_SPA_SETUP.app/**/*
