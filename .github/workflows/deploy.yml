name: Deploy to AWS ECR and EC2 (Debug Version)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_API: cleo-api
  ECR_REPOSITORY_CLIENT: cleo-client

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get commit hash and timestamp
      id: get-vars
      run: |
        echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build client first
    - name: Build client
      run: |
        cd client
        npm ci
        npm run build
        cd ..

    # Build and push client image
    - name: Build and push client image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.get-vars.outputs.commit-hash }}-${{ steps.get-vars.outputs.timestamp }}
      run: |
        docker build -f client/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:latest

    # Build and push API image
    - name: Build and push API image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.get-vars.outputs.commit-hash }}-${{ steps.get-vars.outputs.timestamp }}
      run: |
        docker build -f server/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG ./server
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:latest

    # Test SSH connection first
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          echo "‚úÖ SSH connection successful!"
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Docker status: $(docker --version 2>/dev/null || echo 'Docker not found')"
          echo "AWS CLI status: $(aws --version 2>/dev/null || echo 'AWS CLI not found')"

    # Copy nginx config
    - name: Copy nginx config
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "conf/nginx.conf"
        target: "/home/${{ secrets.EC2_USER }}/cleo-app/"

    # Deploy to EC2 with better error handling
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.get-vars.outputs.commit-hash }}-${{ steps.get-vars.outputs.timestamp }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        envs: ECR_REGISTRY,ECR_REPOSITORY_API,ECR_REPOSITORY_CLIENT,IMAGE_TAG,AWS_REGION
        script: |
          set -e  # Exit on any error
          
          echo "üöÄ Starting deployment..."
          echo "Registry: $ECR_REGISTRY"
          echo "API Image: $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG"
          echo "Client Image: $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG"
          
          # Create app directory
          mkdir -p /home/${{ secrets.EC2_USER }}/cleo-app/conf
          mkdir -p /home/${{ secrets.EC2_USER }}/cleo-app/server
          cd /home/${{ secrets.EC2_USER }}/cleo-app
          
          # Check if .env exists
          if [ ! -f server/.env ]; then
            echo "‚ö†Ô∏è  Warning: server/.env not found. Creating a basic one..."
            cat > server/.env << EOF
          NODE_ENV=production
          PORT=5000
          EOF
          fi
          
          # Login to ECR
          echo "üîê Logging in to ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          
          # Pull images
          echo "üì¶ Pulling images..."
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG || { echo "‚ùå Failed to pull API image"; exit 1; }
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG || { echo "‚ùå Failed to pull client image"; exit 1; }
          
          # Create docker-compose file
          echo "üìù Creating docker-compose.prod.yml..."
          cat > docker-compose.prod.yml << EOF
          services:
            nginx:
              image: nginx:alpine
              volumes:
                - ./conf/nginx.conf:/etc/nginx/nginx.conf:ro
                - client_dist:/usr/share/nginx/html:ro
              ports:
                - "80:80"
                - "443:443"
              depends_on:
                - api
                - client
              restart: unless-stopped
              command: >
                /bin/sh -c "
                until [ -f /usr/share/nginx/html/index.html ]; do
                  echo 'Waiting for client files...'
                  sleep 2
                done &&
                apk add --no-cache openssl &&
                mkdir -p /etc/nginx/conf.d &&
                openssl req -x509 -nodes -days 365 -newkey rsa:2048 
                -keyout /etc/nginx/conf.d/dummy.key 
                -out /etc/nginx/conf.d/dummy.crt 
                -subj '/C=US/ST=State/L=City/O=Organization/CN=localhost' &&
                nginx -g 'daemon off;'"
              networks:
                - cleo-network

            client:
              image: $ECR_REGISTRY/$ECR_REPOSITORY_CLIENT:$IMAGE_TAG
              volumes:
                - client_dist:/usr/share/nginx/html
              command: >
                /bin/sh -c "
                echo 'Copying client files...' &&
                cp -r /usr/share/nginx/html/* /usr/share/nginx/html/ &&
                echo 'Client files ready!' &&
                tail -f /dev/null"
              networks:
                - cleo-network

            api:
              image: $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
              environment:
                - NODE_ENV=production
              volumes:
                - ./server/.env:/usr/src/app/server/.env:ro
              restart: unless-stopped
              networks:
                - cleo-network

          volumes:
            client_dist:

          networks:
            cleo-network:
              driver: bridge
          EOF
          
          # Stop old containers
          echo "üõë Stopping old containers..."
          docker-compose -f docker-compose.prod.yml down --remove-orphans || true
          
          # Start new containers
          echo "üéØ Starting new containers..."
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait and check
          echo "‚è≥ Waiting for containers to start..."
          sleep 10
          
          # Check container status
          echo "üìä Container status:"
          docker-compose -f docker-compose.prod.yml ps
          
          # Test basic connectivity
          echo "üîç Testing connectivity..."
          if timeout 30 sh -c 'until curl -f http://localhost >/dev/null 2>&1; do sleep 1; done'; then
            echo "‚úÖ Application is responding!"
          else
            echo "‚ùå Application not responding. Checking logs..."
            docker-compose -f docker-compose.prod.yml logs --tail=50
            exit 1
          fi
          
          echo "üéâ Deployment completed successfully!"

    - name: Final status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful! Application is running at http://${{ secrets.EC2_HOST }}"
          echo "üîç Check your app at: http://${{ secrets.EC2_HOST }}"
        else
          echo "‚ùå Deployment failed. Check the logs above for details."
          echo "üêõ Common issues:"
          echo "   - SSH connection failed (check EC2_PRIVATE_KEY secret)"
          echo "   - Docker not installed on EC2"
          echo "   - AWS CLI not configured on EC2"
          echo "   - ECR login failed"
          echo "   - Missing environment files"
        fi