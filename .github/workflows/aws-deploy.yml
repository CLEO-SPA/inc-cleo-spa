name: Deploy to AWS EC2 via ECR

on:
  push:
    branches: [main, feature/aws-hosting, bugfix/master]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY_API: cleo-dev
  PROJECT_NAME: cleo-spa

permissions:
  contents: read
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      api-image: ${{ steps.build-api.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'

      - name: Build frontend
        working-directory: ./client
        run: |
          npm ci
          npm run build

      - name: Build and push API image
        id: build-api
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG"

          echo "Building image: $IMAGE_URI"
          docker build -t "$IMAGE_URI" ./server
          docker push "$IMAGE_URI"
          
          # Set output for other steps
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT
          
          # Debug: Verify the output was set
          echo "Image built and pushed: $IMAGE_URI"
          echo "GITHUB_OUTPUT contents:"
          cat $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug job outputs
        run: |
          echo "All outputs from build-and-push job:"
          echo "api-image: '${{ needs.build-and-push.outputs.api-image }}'"
          
          # Alternative way to construct image name if output is missing
          IMAGE_TAG="${{ github.sha }}"
          FALLBACK_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_API }}:$IMAGE_TAG"
          echo "Fallback image would be: $FALLBACK_IMAGE"

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 400 ~/.ssh/deploy_key
          echo "Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USERNAME }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no" > ~/.ssh/config

      - name: Create deployment files
        run: |
          # Debug: Show the image name we received
          echo "Received image: '${{ needs.build-and-push.outputs.api-image }}'"
          
          # Use fallback image construction if output is empty
          if [ -z "${{ needs.build-and-push.outputs.api-image }}" ]; then
            echo "Image output is empty, constructing image name manually..."
            IMAGE_TAG="${{ github.sha }}"
            IMAGE_NAME="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_API }}:$IMAGE_TAG"
            echo "Using constructed image: $IMAGE_NAME"
          else
            IMAGE_NAME="${{ needs.build-and-push.outputs.api-image }}"
            echo "Using received image: $IMAGE_NAME"
          fi
          
          # Create compose override for production
          cat > compose.override.yml << EOF
          services:
            api:
              image: "$IMAGE_NAME"
              build: {}
              ports:
                - "5000:3000"  # Map nginx expected port 5000 to container port 3000
          EOF
          
          # Save image name for next step
          echo "DEPLOY_IMAGE=$IMAGE_NAME" >> $GITHUB_ENV
          
          # Debug: Show the created file
          echo "Created compose.override.yml:"
          cat compose.override.yml

      - name: Sync project files
        run: |
          rsync -avz --delete \
            --exclude '.git/' \
            --exclude 'node_modules/' \
            --exclude '.github/' \
            ./ ec2:/home/ubuntu/${{ env.PROJECT_NAME }}/

      - name: Setup EC2 Dependencies and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/${{ env.PROJECT_NAME }}

            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
              
              # Add Docker's official GPG key and repository
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
              
              echo "Docker installed successfully"
            fi

            # Install ECR credential helper if not already installed
            if ! command -v docker-credential-ecr-login &> /dev/null; then
              echo "Installing ECR credential helper..."
              sudo apt update
              sudo apt install -y amazon-ecr-credential-helper
              
              # Configure Docker to use ECR credential helper
              mkdir -p ~/.docker
              cat > ~/.docker/config.json << 'DOCKER_CONFIG_EOF'
            {
                "credHelpers": {
                    "${{ env.ECR_REGISTRY }}": "ecr-login"
                }
            }
            DOCKER_CONFIG_EOF
              
              echo "ECR credential helper configured successfully"
            fi

            # Ensure we can use docker without sudo (apply group membership)
            if ! groups | grep -q docker; then
              echo "Applying docker group membership..."
              newgrp docker << 'DOCKER_COMMANDS_EOF'
              # Test docker access
              docker --version
              docker compose version
            DOCKER_COMMANDS_EOF
            fi

            # Create .env file
            echo "${{ secrets.ENV_FILE }}" > ./server/.env

            # Ensure client/dist directory exists
            mkdir -p client/dist

            # Get image name from environment (set in previous step)
            IMAGE_TO_PULL="${{ env.DEPLOY_IMAGE }}"
            
            # Debug: Show the image name we're trying to pull
            echo "Image to pull: '$IMAGE_TO_PULL'"
            
            # Validate image name is not empty
            if [ -z "$IMAGE_TO_PULL" ]; then
              echo "Error: Image name is empty! Cannot proceed with deployment."
              exit 1
            fi

            # Pull the latest API image (ECR credential helper handles authentication automatically)
            echo "Pulling Docker image: $IMAGE_TO_PULL"
            docker pull "$IMAGE_TO_PULL"

            # Debug: Show the compose override file content
            echo "Content of compose.override.yml:"
            cat compose.override.yml

            # Validate compose files
            echo "Validating Docker Compose configuration..."
            docker compose -f compose.yml -f compose.override.yml config

            # Deploy using existing compose.yml with override
            echo "Starting deployment with Docker Compose..."
            docker compose -f compose.yml -f compose.override.yml up -d

            # Health check
            echo "Waiting for services to start..."
            attempt=1
            max_attempts=30
            while [ $attempt -le $max_attempts ]; do
              if ! docker compose ps | grep -q "starting" && \
                 ! docker compose ps | grep -q "unhealthy"; then
                break
              fi
              echo "Attempt $attempt: Services still starting or unhealthy..."
              sleep 10
              ((attempt++))
            done

            # Final status check
            if docker compose ps | grep -q "Exit" || \
               docker compose ps | grep -q "unhealthy"; then
              echo "Deployment failed - some containers exited or are unhealthy"
              docker compose logs
              exit 1
            else
              echo "Deployment successful!"
              docker compose ps
              echo "Recent logs:"
              docker compose logs --tail=50
            fi