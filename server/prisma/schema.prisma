generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model care_packages {
  id                        BigInt   @id @default(autoincrement())
  care_package_name         String   @db.VarChar(200)
  care_package_remarks      String?
  care_package_price        Decimal  @db.Decimal(10, 2)
  created_at                DateTime @default(now()) @db.Timestamptz(6)
  updated_at                DateTime @db.Timestamptz(6)
  care_package_customizable Boolean  @default(false)
  status_id                 BigInt
  created_by                BigInt?
  last_updated_by           BigInt?

  statuses            statuses   @relation(fields: [status_id], references: [id])
  created_by_emp      employees? @relation("CreatedCarePackages", fields: [created_by], references: [id])
  last_updated_by_emp employees? @relation("UpdatedCarePackages", fields: [last_updated_by], references: [id])

  care_package_item_details care_package_item_details[]

  care_package_items care_package_items[]
}

model care_package_item_details {
  id                                 BigInt  @id @default(autoincrement())
  care_package_item_details_quantity Int
  care_package_item_details_discount Decimal @db.Decimal(10, 2)
  care_package_item_details_price    Decimal @db.Decimal(10, 2)
  service_id                         BigInt
  care_package_id                    BigInt

  service      services      @relation(fields: [service_id], references: [id])
  care_package care_packages @relation(fields: [care_package_id], references: [id], onDelete: Cascade)
}

model care_package_items {
  id              BigInt   @id @default(autoincrement())
  care_package_id BigInt
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @db.Timestamptz(6)

  care_package care_packages @relation(fields: [care_package_id], references: [id], onDelete: Cascade)
}

model employees {
  id                                   BigInt                                 @id @default(autoincrement())
  user_auth_id                         BigInt
  employee_code                        String                                 @db.VarChar(50)
  department_id                        BigInt
  created_at                           DateTime                               @db.Timestamptz(6)
  employee_contact                     String                                 @db.VarChar(20)
  employee_email                       String                                 @db.VarChar(255)
  employee_is_active                   Boolean
  employee_name                        String                                 @db.VarChar(100)
  updated_at                           DateTime                               @db.Timestamptz(6)
  position_id                          BigInt?
  commission_percentage                Decimal?                               @default(0.00) @db.Decimal(10, 2)
  department                           departments                            @relation(fields: [department_id], references: [id])
  position                             positions?                             @relation(fields: [position_id], references: [id])
  CreatedInvoicePayments               invoice_payments[]                     @relation("CreatedInvoicePayments")
  UpdatedInvoicePayments               invoice_payments[]                     @relation("UpdatedInvoicePayments")
  invoices                             invoices[]
  member_care_package                  member_care_packages[]
  member_care_package_transaction_logs member_care_package_transaction_logs[]
  refunds                              refunds[]
  serving_employee_to_invoice_items    serving_employee_to_invoice_items[]
  user_auths                           user_auths                             @relation(fields: [user_auth_id], references: [id])

  created_care_packages care_packages[] @relation("CreatedCarePackages")

  updated_care_packages care_packages[] @relation("UpdatedCarePackages")
}

model serving_employee_to_invoice_items {
  id                                BigInt        @id @default(autoincrement())
  commission_percentage             Decimal?      @db.Decimal(10, 2)
  custom_commission_percentage      Decimal?      @db.Decimal(10, 2)
  final_calculated_commission_value Decimal?      @db.Decimal(10, 2)
  reward_status                     String?       @db.VarChar(10)
  rewarded_for_period_month         Int?          @db.SmallInt
  rewarded_for_period_year          Int?          @db.SmallInt
  system_generated_remarks          String?
  user_remarks                      String?
  created_at                        DateTime      @db.Timestamptz(6)
  updated_at                        DateTime      @db.Timestamptz(6)
  invoice_item_id                   BigInt
  reviewed_by_employee_id           BigInt?
  sharing_ratio                     Decimal?      @db.Decimal
  employee_id                       BigInt?
  final_revenue_performance         Decimal?      @db.Decimal
  employees                         employees?    @relation(fields: [reviewed_by_employee_id], references: [id], map: "serving_employee_to_invoice_ite_reviewed_by_employee_id_fkey")
  invoice_items                     invoice_items @relation(fields: [invoice_item_id], references: [id], onDelete: Cascade)
}

model refunds {
  id                  BigInt         @id @default(autoincrement())
  invoice_id          BigInt?
  refund_total_amount Decimal?       @db.Decimal(10, 2)
  refund_remarks      String?
  refund_date         DateTime?      @db.Timestamptz(6)
  employee_id         BigInt?
  refund_items        refund_items[]
  invoices            invoices?      @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_refunds_invoice_id")
  employees           employees?     @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee")
}

model refund_items {
  id                  BigInt         @id @default(autoincrement())
  refund_id           BigInt?
  invoice_item_id     BigInt?
  refund_quantity     Int?
  refund_item_amount  Decimal?       @db.Decimal(10, 2)
  refund_item_remarks String?
  invoice_items       invoice_items? @relation(fields: [invoice_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_refund_items_invoice_item_id")
  refunds             refunds?       @relation(fields: [refund_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_refund_items_refund_id")
}

model departments {
  id                     BigInt      @id @default(autoincrement())
  department_name        String      @db.VarChar(200)
  department_description String?     @db.VarChar(255)
  department_is_active   Boolean
  created_at             DateTime    @db.Timestamptz(6)
  updated_at             DateTime?   @db.Timestamptz(6)
  employees              employees[]
  position               positions[]
}

model invoice_items {
  id                                BigInt                              @id @default(autoincrement())
  invoice_id                        BigInt
  service_name                      String?                             @db.VarChar(255)
  product_name                      String?                             @db.VarChar(255)
  member_care_package_id            BigInt?
  original_unit_price               Decimal?                            @db.Decimal(10, 2)
  custom_unit_price                 Decimal?                            @db.Decimal(10, 2)
  discount_percentage               Decimal?                            @db.Decimal(10, 2)
  quantity                          Int
  remarks                           String?
  amount                            Decimal?                            @db.Decimal(10, 2)
  item_type                         item_type
  invoices                          invoices                            @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  refund_items                      refund_items[]
  serving_employee_to_invoice_items serving_employee_to_invoice_items[]
}

model invoice_payments {
  id                         BigInt          @id @default(autoincrement())
  payment_method_id          BigInt
  invoice_id                 BigInt
  invoice_payment_amount     Decimal?        @db.Decimal(10, 2)
  remarks                    String?
  invoice_payment_created_by BigInt
  created_at                 DateTime        @db.Timestamptz(6)
  invoice_payment_updated_by BigInt
  updated_at                 DateTime        @db.Timestamptz(6)
  invoices                   invoices        @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  CreatedByEmployee          employees       @relation("CreatedInvoicePayments", fields: [invoice_payment_created_by], references: [id])
  UpdatedByEmployee          employees       @relation("UpdatedInvoicePayments", fields: [invoice_payment_updated_by], references: [id])
  payment_method             payment_methods @relation(fields: [payment_method_id], references: [id])
}

model invoices {
  id                               BigInt             @id @default(autoincrement())
  customer_type                    customer_type
  member_id                        BigInt
  total_paid_amount                Decimal            @db.Decimal(10, 2)
  outstanding_total_payment_amount Decimal            @db.Decimal(10, 2)
  invoice_status                   BigInt
  remarks                          String?
  manual_invoice_no                String?            @db.VarChar(50)
  reference_invoice_id             BigInt?
  invoice_handler_employee_id      BigInt
  created_at                       DateTime           @db.Timestamptz(6)
  updated_at                       DateTime           @db.Timestamptz(6)
  total_invoice_amount             Decimal?           @db.Decimal(10, 2)
  invoice_items                    invoice_items[]
  invoice_payment                  invoice_payments[]
  employees                        employees          @relation(fields: [invoice_handler_employee_id], references: [id])
  status                           statuses           @relation(fields: [invoice_status], references: [id])
  members                          members            @relation(fields: [member_id], references: [id], onDelete: Cascade)
  refunds                          refunds[]
}

model member_care_packages {
  id                          BigInt                        @id @default(autoincrement())
  member_id                   BigInt
  employee_id                 BigInt
  name                        String                        @db.VarChar(100)
  status                      BigInt
  total_amount                Decimal                       @db.Decimal(10, 2)
  created_at                  DateTime                      @db.Timestamptz(6)
  updated_at                  DateTime                      @db.Timestamptz(6)
  remarks                     String?                       @db.VarChar(255)
  employees                   employees                     @relation(fields: [employee_id], references: [id])
  statuses                    statuses                      @relation(fields: [status], references: [id])
  members                     members                       @relation(fields: [member_id], references: [id], onDelete: Cascade)
  member_care_package_details member_care_package_details[]
}

model member_care_package_details {
  id                                   BigInt                                 @id @default(autoincrement())
  discount                             Decimal                                @db.Decimal(10, 2)
  price                                Decimal                                @db.Decimal(10, 2)
  member_care_package_id               BigInt
  service_id                           BigInt?
  status_id                            BigInt
  quantity                             Int
  member_care_package                  member_care_packages                   @relation(fields: [member_care_package_id], references: [id], onDelete: Cascade)
  service                              services?                              @relation(fields: [service_id], references: [id])
  status                               statuses                               @relation(fields: [status_id], references: [id])
  member_care_package_transaction_logs member_care_package_transaction_logs[]
}

model statuses {
  id                          BigInt                        @id @default(autoincrement())
  status_name                 String                        @unique @db.VarChar(50)
  status_description          String?                       @db.VarChar(255)
  created_at                  DateTime                      @db.Timestamptz(6)
  care_package                care_packages[]
  invoices                    invoices[]
  member_care_package         member_care_packages[]
  member_care_package_details member_care_package_details[]
  membership_accounts         membership_accounts[]
}

model member_care_package_transaction_logs {
  id                             BigInt   @id @default(autoincrement())
  type                           String   @db.VarChar(100)
  description                    String
  transaction_date               DateTime @db.Timestamptz(6)
  transaction_amount             Decimal  @db.Decimal(10, 2)
  amount_changed                 Decimal  @db.Decimal(10, 2)
  created_at                     DateTime @db.Timestamptz(6)
  member_care_package_details_id BigInt
  employee_id                    BigInt
  service_id                     BigInt

  employees                   employees                   @relation(fields: [employee_id], references: [id])
  service                     services                    @relation(fields: [service_id], references: [id])
  member_care_package_details member_care_package_details @relation(fields: [member_care_package_details_id], references: [id], onDelete: Cascade)
}

model members {
  id                 BigInt    @id @default(autoincrement())
  name               String    @db.VarChar(100)
  email              String?   @db.VarChar(100)
  contact            String?   @db.VarChar(20)
  dob                DateTime? @db.Date
  sex                String?   @db.VarChar(10)
  remarks            String?   @db.VarChar(255)
  address            String?   @db.VarChar(255)
  nric               String?   @db.VarChar(9)
  membership_type_id Int?
  created_at         DateTime? @db.Timestamptz(6)
  updated_at         DateTime? @db.Timestamptz(6)
  created_by         Int?
  user_auth_id       BigInt?

  invoices invoices[]

  user_auths           user_auths?            @relation(fields: [user_auth_id], references: [id])
  member_care_packages member_care_packages[]
}

model membership_accounts {
  membership_accounts_id         BigInt    @id(map: "cs_membership_accounts_pkey") @default(autoincrement())
  member_id                      BigInt
  membership_type_id             BigInt
  start_date                     DateTime  @db.Timestamp(6)
  end_date                       DateTime? @db.Timestamp(6)
  is_active                      Boolean
  membership_accounts_created_at DateTime  @db.Timestamp(6)
  membership_accounts_updated_at DateTime  @db.Timestamp(6)
  status_id                      BigInt

  statuses statuses @relation(fields: [status_id], references: [id])
}

model membership_types {
  id                                      BigInt    @id @default(autoincrement())
  membership_type_name                    String    @db.VarChar(50)
  default_discount_for_products           Decimal?  @db.Decimal
  default_discount_percentage_for_service Decimal?  @db.Decimal
  created_at                              DateTime? @db.Timestamptz(6)
  updated_at                              DateTime? @db.Timestamptz(6)
}

model payment_methods {
  id                        BigInt   @id
  payment_method_name       String
  is_enabled                Boolean
  is_revenue                Boolean
  payment_method_created_at DateTime @db.Timestamptz(6)
  payment_method_updated_at DateTime @db.Timestamptz(6)

  invoice_payments invoice_payments[]
}

model positions {
  id                            BigInt    @id @default(autoincrement())
  position_name                 String    @db.VarChar(255)
  position_description          String?   @db.VarChar(255)
  position_is_active            Boolean?  @default(true)
  default_commission_percentage Decimal?  @db.Decimal(10, 2)
  position_created_at           DateTime? @default(now()) @db.Timestamptz(6)
  position_updated_at           DateTime? @default(now()) @db.Timestamptz(6)
  department_id                 BigInt

  departments departments @relation(fields: [department_id], references: [id])
  employees   employees[]
}

model product_categories {
  id                           BigInt   @id @default(autoincrement())
  product_category_name        String   @db.VarChar(255)
  product_category_sequence_no Int
  product_category_created_at  DateTime @default(now()) @db.Timestamptz(6)
  product_category_updated_at  DateTime @db.Timestamptz(6)
}

model products {
  id                    BigInt    @id @default(autoincrement())
  product_name          String    @db.VarChar(255)
  product_description   String?   @db.VarChar(255)
  product_sequence_no   Int?
  product_remarks       String?
  product_default_price Decimal?  @db.Decimal(10, 2)
  product_outlet_id     BigInt
  product_is_active     Boolean?  @default(true)
  product_created_at    DateTime? @default(now()) @db.Timestamptz(6)
  product_updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  product_category_id   BigInt?
}

model roles {
  id          BigInt   @id @default(autoincrement())
  role_name   String   @db.VarChar(20)
  description String   @db.VarChar(50)
  created_at  DateTime @db.Timestamptz(6)

  user_to_role user_to_role[]
}

model services {
  id                                   BigInt                                 @id(map: "cs_service_pkey") @default(autoincrement())
  service_name                         String                                 @db.VarChar(255)
  service_description                  String?                                @db.VarChar(255)
  service_remarks                      String?
  service_estimated_duration           Decimal                                @db.Decimal
  service_default_price                Decimal                                @db.Decimal(10, 2)
  service_is_active                    Boolean
  service_created_at                   DateTime                               @default(now()) @db.Timestamptz(6)
  service_updated_at                   DateTime                               @default(now()) @db.Timestamptz(6)
  service_category_id                  BigInt
  service_sequence_no                  Int
  member_care_package_details          member_care_package_details[]
  member_care_package_transaction_logs member_care_package_transaction_logs[]
  care_package_item_details            care_package_item_details[]

  @@index([service_category_id], map: "fki_cs_service_service_category_id_fkey")
}

model service_categories {
  id                           BigInt   @id @default(autoincrement())
  service_category_name        String   @db.VarChar(255)
  service_category_sequence_no Int?
  service_category_created_at  DateTime @default(now()) @db.Timestamptz(6)
  service_category_updated_at  DateTime @db.Timestamptz(6)
}

model translations {
  id                 Int      @id @default(autoincrement())
  english            String   @db.VarChar(255)
  chinese            String   @db.VarChar(255)
  meaning_in_english String   @db.VarChar(255)
  meaning_in_chinese String   @db.VarChar(255)
  page               String?  @db.VarChar(255)
  created_at         DateTime @db.Timestamp(6)
  updated_at         DateTime @db.Timestamp(6)
}

model user_to_role {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  role_id    BigInt
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)

  user_auths user_auths @relation(fields: [user_id], references: [id])
  roles      roles      @relation(fields: [role_id], references: [id])
}

model appointments {
  id                    BigInt    @id
  member_id             BigInt?
  servicing_employee_id BigInt?
  appointment_date      DateTime? @db.Timestamptz(6)
  start_time            DateTime? @db.Timestamptz(6)
  end_time              DateTime? @db.Timestamptz(6)
  remarks               String?
  created_at            DateTime? @db.Timestamptz(6)
  created_by            BigInt?
  updated_at            DateTime? @db.Timestamptz(6)
  updated_by            BigInt?
}

model member_voucher_details {
  id                BigInt    @id
  member_voucher_id BigInt
  service_id        Int
  service_name      String?   @db.VarChar(100)
  original_price    Decimal?  @db.Decimal(10, 2)
  custom_price      Decimal?  @db.Decimal(10, 2)
  discount          Decimal?  @db.Decimal(10, 2)
  final_price       Decimal?  @db.Decimal(10, 2)
  duration          Int?
  created_at        DateTime? @db.Timestamptz(6)
  updated_at        DateTime? @db.Timestamptz(6)
}

model member_voucher_transaction_logs {
  id                  Int       @id @default(autoincrement())
  member_voucher_id   Int
  service_description String?   @db.VarChar(500)
  service_date        DateTime? @db.Timestamptz(6)
  current_balance     Decimal?  @db.Decimal(10, 2)
  amount_change       Decimal?  @db.Decimal
  serviced_by         BigInt?
  type                String?   @db.VarChar(25)
  created_by          BigInt?
  last_updated_by     BigInt?
  created_at          DateTime? @db.Timestamptz(6)
  updated_at          DateTime? @db.Timestamptz(6)
}

model member_vouchers {
  id                   BigInt    @id
  member_vouchers_name String    @db.VarChar(100)
  voucher_template_id  Int
  members_id           Int
  current_balance      Decimal?  @db.Decimal(10, 2)
  starting_balance     Decimal?  @db.Decimal(10, 2)
  free_of_charge       Decimal?  @db.Decimal(10, 2)
  default_total_price  Decimal?  @db.Decimal(10, 2)
  status               String?   @db.VarChar(50)
  remarks              String?   @db.VarChar(500)
  created_by           BigInt?
  handled_by           BigInt?
  last_updated_by      BigInt?
  created_at           DateTime? @db.Timestamptz(6)
  updated_at           DateTime? @db.Timestamptz(6)
}

model payment_to_sale_transactions {
  id                  Int       @id
  payment_method_id   Int?
  sale_transaction_id Int?
  amount              Decimal?  @db.Decimal(10, 2)
  remarks             String?
  created_by          Int?
  created_at          DateTime? @db.Timestamptz(6)
  updated_by          Int?
  updated_at          DateTime? @db.Timestamptz(6)
}

model sale_transaction_items {
  id                     Int      @id
  sale_transactions_id   Int?
  service_name           String?  @db.VarChar(255)
  product_name           String?  @db.VarChar(255)
  member_care_package_id BigInt?
  member_voucher_id      BigInt?
  original_unit_price    Decimal? @db.Decimal(10, 2)
  custom_unit_price      Decimal? @db.Decimal(10, 2)
  discount_percentage    Decimal? @db.Decimal(5, 2)
  quantity               Int?
  remarks                String?  @db.VarChar(500)
  amount                 Decimal? @db.Decimal(10, 2)
  item_type              String?  @db.VarChar(255)
}

model sale_transactions {
  id                               BigInt    @id @default(autoincrement())
  customer_type                    String?   @db.VarChar(50)
  member_id                        BigInt?
  total_paid_amount                Decimal?  @db.Decimal
  outstanding_total_payment_amount Decimal?  @db.Decimal
  sale_transaction_status          String?   @db.VarChar(25)
  remarks                          String?   @db.VarChar(500)
  receipt_no                       String?   @db.VarChar(80)
  reference_sales_transaction_id   BigInt?
  handled_by                       BigInt?
  created_by                       BigInt?
  created_at                       DateTime? @db.Timestamptz(6)
  updated_at                       DateTime? @db.Timestamptz(6)
}

model timetables {
  id                  Int       @id @default(autoincrement())
  employee_id         Int
  restday_number      Int
  effective_startdate DateTime  @db.Timestamp(6)
  effective_enddate   DateTime? @db.Timestamp(6)
  created_by          Int?
  created_at          DateTime? @db.Timestamp(6)
  updated_by          Int?
  updated_at          DateTime? @db.Timestamp(6)
}

model user_auths {
  id         BigInt   @id @default(autoincrement())
  password   String   @db.VarChar(72)
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)
  email      String?  @db.VarChar(50)
  phone      String?  @db.VarChar(20)

  employees employees[]

  user_to_role user_to_role[]

  members members[]
}

model voucher_template_details {
  id                  BigInt  @id @default(autoincrement())
  voucher_template_id BigInt
  service_id          BigInt
  service_name        String  @db.VarChar(100)
  original_price      Decimal @db.Decimal(10, 2)
  custom_price        Decimal @db.Decimal(10, 2)
  discount            Decimal @db.Decimal(10, 2)
  final_price         Decimal @db.Decimal(10, 2)
  duration            Int
  service_category_id Int?
}

model voucher_templates {
  id                       BigInt    @id @default(autoincrement())
  voucher_template_name    String    @db.VarChar(100)
  default_starting_balance Decimal?  @db.Decimal(10, 2)
  default_free_of_charge   Decimal?  @db.Decimal(10, 2)
  default_total_price      Decimal?  @db.Decimal(10, 2)
  remarks                  String?   @db.VarChar(500)
  status                   String?   @db.VarChar(50)
  created_by               BigInt?
  last_updated_by          BigInt?
  created_at               DateTime? @db.Timestamptz(6)
  updated_at               DateTime? @db.Timestamptz(6)
}

model system_parameters {
  id             BigInt    @id @default(autoincrement())
  start_date_utc DateTime  @db.Timestamp(6)
  end_date_utc   DateTime  @db.Timestamp(6)
  is_simulation  Boolean
}

enum customer_type {
  Member
  Walk_In_Customer
}

enum item_type {
  Product
  Service
  Member_Care_Package
  Membership_Account
  Member_Voucher      @map("Member Voucher")
}

enum customer_type_enum {
  member
  walk_in_customer @map("walk-in-customer")
}
